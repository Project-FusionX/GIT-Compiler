name: FusionX-All-in-One
 
on:
   pull_request:
   workflow_dispatch:
     inputs:
       KERNEL_TREE:
         description: 'Kernel Tree'
         default: 'https://github.com/Project-FusionX/fusionX_kernel_sm8250'
         required: true
       KERNEL_TREE_BRANCH:
         description: 'Kernel Tree Branch'
         default: 'fx-base'
         required: true
         type: string
       VERSION:
         description: 'Zip Version'
         default: '1.x'
         required: false
       ANYKERNEL_URL:
         description: 'AnyKernel Url (leave blank if you dont want AnyKernel)'
         default: 'https://github.com/SenseiiX/AnyKernel3'
         required: false
       ANYKERNEL_BRANCH:
         description: 'AnyKernel Branch'
         default: 'effcpu'
         required: true
       CUSTOM_SED:
         description: 'Custom Kernel Version'
         default: '-FusionX'
         required: false
       USE_LTO_THIN:
         description: 'Use LTO Thin instead of LTO Full'
         required: false
         type: boolean
         default: false
       CLANG_TOOLCHAIN:
         description: 'Choose which Clang toolchain to use'
         required: false
         type: choice
         options:
           - aosp clang
           - neutron clang
         default: 'aosp clang'
 
jobs:
   build_kernel:
     strategy:
       matrix:
         type: [original, modified]
     runs-on: ubuntu-latest
     env:
       UPLOAD_TO_RELEASE: false
       KERNEL_VARIANT: NEXT

     steps:
       - name: Install Dependencies
         run: |
           sudo apt install flex libncurses6
           # Install zstd if using neutron clang
           if [[ "${{ github.event.inputs.CLANG_TOOLCHAIN }}" == "neutron clang" ]]; then
             sudo apt install zstd
           fi

       - name: Cache Clang toolchain
         uses: actions/cache@v3
         id: cache-clang
         with:
           path: ${{ github.event.inputs.CLANG_TOOLCHAIN == 'aosp clang' && 'clang-aosp' || 'clang-neutron' }}
           key: ${{ github.event.inputs.CLANG_TOOLCHAIN }}-${{ runner.os }}-${{ github.event.inputs.CLANG_TOOLCHAIN == 'aosp clang' && 'r547379' || '10032024-v1' }}
           restore-keys: |
             ${{ github.event.inputs.CLANG_TOOLCHAIN }}-${{ runner.os }}-
             ${{ github.event.inputs.CLANG_TOOLCHAIN }}-

       - name: Download & Extract Clang (If not cached)
         if: steps.cache-clang.outputs.cache-hit != 'true'
         run: |
           if [[ "${{ github.event.inputs.CLANG_TOOLCHAIN }}" == "aosp clang" ]]; then
             wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r547379.tar.gz -O clang.tar.gz
             mkdir -p clang-aosp
             tar -xf clang.tar.gz -C clang-aosp
           else
             wget https://github.com/Neutron-Toolchains/clang-build-catalogue/releases/download/10032024/neutron-clang-10032024.tar.zst -O clang.tar.zst
             mkdir -p clang-neutron
             unzstd -d clang.tar.zst
             tar -xf clang.tar -C clang-neutron
           fi
           
       - name: Checkout Kernel
         run: git clone --depth=1 ${{ github.event.inputs.KERNEL_TREE }} -b ${{ github.event.inputs.KERNEL_TREE_BRANCH }} kernel_tree

       - name: Kernel Version
         run: |
           cd kernel_tree
           if [[ "${{ github.event.inputs.CUSTOM_SED }}" != "-FusionX" ]]; then
             sed -i -e 's/CONFIG_LOCALVERSION="-FusionX"/CONFIG_LOCALVERSION="${{ github.event.inputs.CUSTOM_SED }}"/' arch/arm64/configs/vendor/munch_defconfig
           fi
           
       - name: Change LTO Configuration to THIN
         if: ${{ github.event.inputs.USE_LTO_THIN == 'true' }}
         run: |
           cd kernel_tree
           echo "Changing LTO configuration from FULL to THIN..."
           sed -i '
           /CONFIG_ARCH_SUPPORTS_LTO_CLANG=y/c\CONFIG_ARCH_SUPPORTS_LTO_CLANG=y
           /# CONFIG_ARCH_SUPPORTS_LTO_CLANG_THIN is not set/c\CONFIG_ARCH_SUPPORTS_LTO_CLANG_THIN=y
           /CONFIG_HAS_LTO_CLANG=y/c\CONFIG_HAS_LTO_CLANG=y
           /# CONFIG_LTO_NONE is not set/c\# CONFIG_LTO_NONE is not set
           /CONFIG_LTO_CLANG_FULL=y/c\# CONFIG_LTO_CLANG_FULL is not set
           /CONFIG_LTO_CLANG_THIN=n/c\CONFIG_LTO_CLANG_THIN=y
           ' arch/arm64/configs/vendor/munch_defconfig
           
       - name: Apply Patches
         run: |
           cd kernel_tree
           bash nextpatch.sh
           
       - name: Apply Modifications (if modified build)
         if: matrix.type == 'modified'
         run: |
           cd kernel_tree
           sed -i '/<2553600>,/c\<2553600>;' arch/arm64/boot/dts/vendor/qcom/kona.dtsi 
           sed -i '/<2649600>,/c\//<2649600>,' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           sed -i '/<2745600>,/c\//<2745600>,' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           sed -i '/<2841600>;/c\//<2841600>;' arch/arm64/boot/dts/vendor/qcom/kona.dtsi
           sed -i 's/qcom,mdss-pan-physical-width-dimension = <70>;$/qcom,mdss-pan-physical-width-dimension = <695>;/' arch/arm64/boot/dts/vendor/qcom/dsi-panel-l11r-38-08-0a-dsc-cmd.dtsi
           sed -i 's/qcom,mdss-pan-physical-height-dimension = <155>;$/qcom,mdss-pan-physical-height-dimension = <1546>;/' arch/arm64/boot/dts/vendor/qcom/dsi-panel-l11r-38-08-0a-dsc-cmd.dtsi
       
       - name: Record build start time
         id: build_start
         run: |
           # Set timezone to PHT (UTC+8) and use 12-hour format with AM/PM
           echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT
           echo "start_date=$(TZ=Asia/Manila date +'%b %d, %Y %I:%M %p')" >> $GITHUB_OUTPUT
       
       - name: Build Kernel
         run: |
           if [[ "${{ github.event.inputs.CLANG_TOOLCHAIN }}" == "aosp clang" ]]; then
             export PATH="$(pwd)/clang-aosp/bin:$PATH"
           else
             export PATH="$(pwd)/clang-neutron/bin:$PATH"
           fi
           export ARCH=arm64
           export SUBARCH=ARM64
           export KBUILD_BUILD_USER="senseix"
           export KBUILD_BUILD_HOST="ubuntu"
           cd kernel_tree
           make O=out vendor/munch_defconfig
           make O=out CC=clang -j$(nproc --all) CROSS_COMPILE=aarch64-linux-gnu- LLVM=1 LLVM_IAS=1
           if [[ "${{ matrix.type }}" == "original" ]]; then
             mv out/arch/arm64/boot/dtbo.img ../munch-aosp-dtbo.img
             mv out/arch/arm64/boot/dtb ../munch-normal-dtb
             cp out/arch/arm64/boot/Image.gz ../Image.gz
           else
             mv out/arch/arm64/boot/dtbo.img ../munch-miui-dtbo.img
             mv out/arch/arm64/boot/dtb ../munch-effcpu-dtb
           fi

       - name: Verify modified build artifacts
         if: matrix.type == 'modified'
         run: |
           ls -la munch-miui-dtbo.img munch-effcpu-dtb
           if [[ ! -s munch-miui-dtbo.img || ! -s munch-effcpu-dtb ]]; then
             echo "Error: One or more modified build artifacts is missing or empty"
             exit 1
           fi
           
       - name: Record build end time
         id: build_end
         run: |
           end_time=$(date +%s)
           start_time=${{ steps.build_start.outputs.start_time }}
           build_duration=$((end_time - start_time))
           echo "end_time=$end_time" >> $GITHUB_OUTPUT
           echo "build_duration=$build_duration" >> $GITHUB_OUTPUT
       
       - name: Upload Kernel Artifacts
         uses: actions/upload-artifact@v4
         with:
           name: kernel-${{ matrix.type }}
           path: |
             munch-aosp-dtbo.img
             munch-miui-dtbo.img
             munch-normal-dtb
             munch-effcpu-dtb
             Image.gz
             
       - name: Save build metrics
         if: matrix.type == 'original'
         run: |
           mkdir -p /tmp/build-metrics
           echo "${{ steps.build_start.outputs.start_date }}" > /tmp/build-metrics/start-date
           echo "${{ steps.build_end.outputs.build_duration }}" > /tmp/build-metrics/duration
           # Save LTO configuration information
           if [[ "${{ github.event.inputs.USE_LTO_THIN }}" == "true" ]]; then
             echo "LTO: THIN" > /tmp/build-metrics/lto-config
           else
             echo "LTO: FULL" > /tmp/build-metrics/lto-config
           fi
           # Save Clang toolchain information
           echo "CLANG: ${{ github.event.inputs.CLANG_TOOLCHAIN }}" >> /tmp/build-metrics/lto-config
       
       - name: Upload build metrics
         if: matrix.type == 'original'
         uses: actions/upload-artifact@v4
         with:
           name: build-metrics
           path: /tmp/build-metrics/
           
   package_kernel:
     needs: build_kernel
     runs-on: ubuntu-latest
 
     steps:
       - name: Download Kernel Build Original
         uses: actions/download-artifact@v4
         with:
           name: kernel-original
           path: kernel-original
 
       - name: Download Kernel Build Modified
         uses: actions/download-artifact@v4
         with:
           name: kernel-modified
           path: kernel-modified
           
       - name: Download build metrics
         uses: actions/download-artifact@v4
         with:
           name: build-metrics
           path: build-metrics
 
       - name: Clone AnyKernel3
         run: git clone --recursive --depth=1 ${{ github.event.inputs.ANYKERNEL_URL }} -b ${{ github.event.inputs.ANYKERNEL_BRANCH }} AnyKernel3
 
       - name: Move Kernel Files to AnyKernel3
         run: |
           mv kernel-original/* AnyKernel3/
           mv kernel-modified/* AnyKernel3/
          
       - name: Define ZIP Name
         run: |
           # Use Philippine timezone (UTC+8) for date with month and day in numbers
           COMPILED_DATE=$(TZ=Asia/Manila date +%m%d)
           LTO_CONFIG=$(cat build-metrics/lto-config | head -n 1 | cut -d' ' -f2)
           CLANG_TOOLCHAIN=$(cat build-metrics/lto-config | tail -n 1 | cut -d' ' -f2)
           
           BASE_NAME="FusionX-NEXT"
           BUILD_TYPE="Personal Build"
           
           ZIP_NAME="${BASE_NAME}-${{ github.event.inputs.VERSION }}-${COMPILED_DATE}"
           KERNEL_NAME="${BASE_NAME}"
           
           echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV
           echo "KERNEL_NAME=$KERNEL_NAME" >> $GITHUB_ENV
           echo "LTO_CONFIG=$LTO_CONFIG" >> $GITHUB_ENV
           echo "CLANG_TOOLCHAIN=$CLANG_TOOLCHAIN" >> $GITHUB_ENV
           echo "BUILD_TYPE=$BUILD_TYPE" >> $GITHUB_ENV
           
       - name: Package Kernel
         run: |
           cd AnyKernel3
           zip -r9 ../${{ env.ZIP_NAME }}.zip *

       - name: Read build metrics
         id: read_metrics
         run: |
           start_date=$(cat build-metrics/start-date)
           duration=$(cat build-metrics/duration)
           echo "start_date=$start_date" >> $GITHUB_OUTPUT
           echo "duration=$duration" >> $GITHUB_OUTPUT
           
           # Convert seconds to minutes and seconds format
           minutes=$((duration / 60))
           seconds=$((duration % 60))
           echo "build_time=${minutes}m ${seconds}s" >> $GITHUB_OUTPUT
       
       - name: Upload Flashable Kernel Zip to Telegram
         uses: appleboy/telegram-action@master
         with:
           to: ${{ secrets.TELEGRAM_CHAT_ID }}
           token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
           document: ${{ env.ZIP_NAME }}.zip
           format: html
           message: |
            <b>✅ ${{ env.KERNEL_NAME }} Build Complete!</b> 
            <b>🔻Yml:</b> All in One  
            <b>📅 Date:</b> ${{ steps.read_metrics.outputs.start_date }}
            <b>🕔 Build Duration:</b> ${{ steps.read_metrics.outputs.build_time }}
            <b>📱 Device Codename:</b> munch
            <b>📑 Branch:</b> ${{ github.event.inputs.KERNEL_TREE_BRANCH }}
            <b>🔧 Lto:</b> ${{ env.LTO_CONFIG }}
            <b>⚙️ Toolchain:</b> ${{ env.CLANG_TOOLCHAIN }}
            <b>📂 Build Type:</b> ${{ env.BUILD_TYPE }}
          
       - name: Upload Flashable Kernel Zip
         uses: actions/upload-artifact@v4
         with:
           name: ${{ env.ZIP_NAME }}
           path: ${{ env.ZIP_NAME }}.zip
